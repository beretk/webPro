20231103

<Spring_DI자동 의존 설정과 빈 생명주기와 범위  >
※DI(Dependency Injection) 자동 의존 설정과 빈 생명주기와 범위  (webproject로 생성)
1.의존 객체의 자동 주입:setter주입, 생성자주입(제일안전하다), 필드주입(간편)
-@Autowired // 필드주입
 private Student student;
-@Autowired
 public StudentInfo(Student student) { // 생성자주입
 	this.student = student;
 }
-@Autowired 
 public void setStudent(Student student) { // setter 주입
 	this.student = student;
 }

2.스프링 컨테이너 생명 주기
-스프링 컨테이너 생성 : GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
-스프링 컨테이너 설정 : ctx.load(“classpath:applicationCTX.xml”); ctx.refresh();
-스프링 컨테이너 사용 : Student st = ctx.getBean(“student”,Student.class); st.getName();
-스프링 컨테이너 소멸(자원해제) : ctx.close();

3.스프링 빈 생명 주기
-Implements EnvironmentAware – 인터페이스를 이용한 생명주기
-①EnvironmentAware를 implements하면 오버라이드한 setEnvironment() 생성 : 빈이 만들어지기 전 수행 – 환경변수에 대한 변경이 생길 시에만 호출됨
-Implements InitializingBean, DisposableBean – 인터페이스를 이용한 생명주기 관리 방법
-①InitializingBean을 implements하면 오라바이드한 afterPropertiesSet() 생성 : 빈 초기화 과정(ctx.refresh())에서 호출됨.
-②DisposableBean 을 implements하면 오버라이드한 destroy() 생성 : 빈 소멸과정(ctx.close())에서 호출됨.
※ctx.close()의 경우 컨테이너가 소멸 하는 단계. 컨테이너가 소멸 하면, 빈은 자동 소멸 됩니다. 

4.스프링 빈 범위
-스프링 컨테이너가 생성되고, 스프링 빈이 생성될 때, 생성된 스프링 빈은 scope를 가지고 있다. 범위란 객체가 어디까지 영향을 미치는지 결정하는 것. 기본이 scope="singleton"(cf. scope=" prototype ")


<Spring_외부파일(*.properties)을 이용한 설정>
※(webproject로 생성 – Environment 때문에)
1.Environment 객체를 이용
 (1)Context 객체를 얻는다.
 -ConfigurableApplicationContext ctx = new GenericXmlApplicationContext();
 (2)Context 객체로부터 ctx.getEnvironment()를 하여 Environment 객체를 얻는다. 
 -ConfigurableEnvironment env = ctx.getEnvironment();
 (3)Environment객체안에는 여러 가지 정보들(환경설정을 위한)이 있다. 
 -MutablePropertySources propertySources = env.getPropertySources();
 (4)추가 : propertySources.addLast()
 -propertySources.addLast(new ResourcePropertySource("classpath:admin.properties"));


2.프로퍼티 파일을 직접 이용한 설정 ; Environment 객체를 사용하지 않고 프로퍼티 파일을 직접 이용하여 스프링 빈을 설정하는 방법 
 -스프링 설정 XML 파일에 프로퍼티 파일을 명시하는 방법

3.프로파일(profile) 속성을 이용한 설정 ; 동일한 스프링 빈을 여러 개 만들어 놓고 상황(환경)에 따라서 적절한 스프링 빈을 사용할 수 있게 함 profile 속성을 사용하면 됨.
 -Xml 설정 파일을 이용하는 경우 : 스프링 컨테이너에서 어떤 설정 파일을 사용할지 결정 함 setActiveProfiles(config)